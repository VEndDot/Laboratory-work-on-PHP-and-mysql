<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Лабораторная работа №17</title>
    <style>
        h1,h2,h3,h4,h5{
            text-align: center;
            margin: 10px;
        }
    </style>
</head>
<body>
    <h1>Работа с регулярными выражениями на PHP</h1>
    <h2>Функция preg_replace</h2>
    <div>
        <?php 
            echo preg_replace("#a#",'!', 'aabbaa');
            // # - ограничитель регулярных выражений
            // они нужны для того, чтобы после них писать модификаторы
            // модификаторы - команды, которые изменяют общие свойства регулярного выраж
            // например модификатор i заставит игнорировать регистр символов
            echo "<br/>".preg_replace("#A#", '!', 'aAb') ;
            echo "<br/>".preg_replace("#A#i", '!', 'aAb') ;
        ?>
    </div>
    <h2>Буквы, цифры, любой символ</h2>
    <div>
        <?php 
            // В регулярных выражениях есть два типа символов
            // которые обохначают сами себя
            // и символы команды
            // буквы и цифры обозначают сами себя
            // точка является спец символом = любой символ
            echo preg_replace('#xax#', '!', 'xax xaax');
            echo "<br/>".preg_replace('#123#', '!', '123 xaax');
            echo "<br/>".preg_replace('#x3x#', '!', 'x3x xaax');
            // регистр имеет значение
            echo "<br/>".preg_replace('#A3B#','!','a3b A3B');

            // Пример с использованием спецсимвола точка
            echo "<br/>".preg_replace('#x.x#', '!', 'xax xsx x&x x-x xaax');
            echo "<br/>".preg_replace('#x..x#', '!', 'xax xabx');
        ?>
    </div>
    <h2>Операторы повторения символов (*,+,?)</h2>
    <div>
        <?php 
            // если мы хотим сказать повторить один или более раз
            // для этого существуют операторы(квантификаторы) повторения
            // + один и более раз
            // * ноль и более раз
            // ? ноль или один раз
            // ДАННЫЕ ОПЕРАТОРЫ ДЕЙСТВУЮТ НА СИМВОЛ, КОТОРЫЙ СТОИТ ПЕРЕД НИМИ
            echo preg_replace('#xa+x#', '!', 'xx xax xaax xaaax xbx');
            echo "<br/>".preg_replace('#xa*x#', '!', 'xx xax xaax xaaax xbx');
            echo "<br/>".preg_replace('#xa?x#', '!', 'xx xax xaax xbx');
        ?>
    </div>
    <h2>Группирующие скобки</h2>
    <div>
        <?php 
            // группирующие скобки позволяют подействовать сразу на несколько символов
            // а не на один как раньше
            echo "<br/>".preg_replace('#x(ab)+x#', '!', 'xabx xababx xaabbx');
            // буква "х" далее строка ab один или более раз потому буква "x"
            // если что-то стоит в группирующих скобках и сразу после ')' стоит опер повторения
            // он подействует на все, что стоит внутри скобок
        ?>
    </div>
    <h2>Экранировка спецсимволов</h2>
    <div>
        <?php 
            // Экранировка спецсимволов - если мы хотим, чтобы СПЕЦСИМВОЛ обозначал сам себя
            // след. пример будет работать не так, как хотим
            echo "<br/>".preg_replace('#a+x#', '!', 'a+x ax aax aaax');
            // автор хотел чтобы изменилась "a+x"

            // ПРАВИЛО_чтобы спец символ обозначал сам себя - его нужно экранировать с помощью "\"
            echo "<br/>".preg_replace('#a\+x#', '!', 'a+x ax aax aaax');
            echo "<br/>".preg_replace('#a\.x#', '!', 'a.x abx azx');
            echo "<br/>".preg_replace('#a.x#', '!', 'a.x abx azx');
            
            
        ?>
    </div>
    <h2>Ограничители</h2>
    <div>
        <?php
            // В качестве ограничителей могут выступать не только # 
            // но и любые другие символы
            // ТОЛЬКО НЕ БУКВЫ И ЦИФРЫ
            // ЕСЛИ ИСПОЛЬЗУЮТСЯ "()"
            // ЛЕВЫЙ "("
            // ПРАВЫЙ ")"
            echo preg_replace('&а+&', '!', 'строка');
            echo "<br/>".preg_replace('(а+)', '!', 'строка');
        ?>
    </div>
    <h2>Список спец.символов и обычных</h2>
    <ol>
        <p>Являются специальными</p>
        <li>$^.*+?\{}[]()|</li>
        <p>Не являются специальными</p>
        <li>@:,'";-_=<>%#~`&!/</li>
    </ol>
    <h2>Ограничители жадности</h2>
    <div>
        <?php 
            // выведет "! е", а ожидалось "! qw x e"
            echo preg_replace('#a.+x#', '!', 'a23e4x qw x e');
            // такое поведение называется жадностью
            // ее можно отменить (ограничить жадность)
            // делается это с помощью "?" к оператору повторения
            echo "<br/>".preg_replace('#a.+?x#', '!', 'a23e4x qw x e');
            // жадность можно ограничить всем операторам повторения, в том числе и "?" и "{}" 
            // вот так "??" и "{}?"  
        ?>
    </div>
    <h2>Задачи для решения</h2>
    <h2>На "." символы</h2>
    <div>
        <h3>Задача №1</h3>
        <?php 
            // Написать регулярку, которая найдет строки:
            //  ahb
            //  acb
            //  aeb
            // по шаблону: буква "а", любой символ, буква  "б"
            $str = 'ahb acb aeb aeeb adcb axeb';
            preg_match_all('#a.b#',$str, $arr);
            print_r($arr[0]);
        ?>
    </div>
    <div>
        <h3>Задача №2</h3>
        <?php 
            // Написать регулярку, которая найдет строки:
            //  abba
            //  abca
            //  abea
            // по шаблону: буква "а", 2 любой символ, буква  "a"
            $str = 'aba aca aea abba adca abea';
            preg_match_all('#a..a#',$str, $arr);
            print_r($arr[0]);
        ?>
    </div>
    <div>
        <h3>Задача №3</h3>
        <?php 
            // Написать регулярку, которая найдет строки:
            //  abba
            //  
            //  abea
            // по шаблону: буква "а", 2 любой символ, буква  "a"
            $str = 'aba aca aea abba adca abea';
            preg_match_all('#ab.a#',$str, $arr);
            print_r($arr[0]);
        ?>
    </div>
    <h2>На "+", "*", "?", ()</h2>
    <div>
        <h3>Задача №4</h3>
        <?php 
            // Написать регулярку, которая найдет строки:
            //  aba
            //  abba
            //  abbba
            $str = 'aa aba abba abbba abca abea';
            preg_match_all('#ab+a#',$str, $arr);
            print_r($arr[0]);
        ?>
    </div>
    <div>
        <h3>Задача №5</h3>
        <?php 
            // Написать регулярку, которая найдет строки:
            //  aa
            //  aba
            //  abba
            //  abbba
            $str = 'aa aba abba abbba abca abea';
            preg_match_all('#ab*a#',$str, $arr);
            print_r($arr[0]);
        ?>
    </div>
    <div>
        <h3>Задача №6</h3>
        <?php 
            // Написать регулярку, которая найдет строки:
            //  aa
            //  aba

            $str = 'aa aba abba abbba abca abea';
            preg_match_all('#ab?a#',$str, $arr);
            print_r($arr[0]);
        ?>
    </div>
    <div>
        <h3>Задача №7</h3>
        <?php 
            // Написать регулярку, которая найдет строки:
            //  
            //  
            // по шаблону строка "ab" повторяется 1 или более раз
            $str = 'ab abab abab abababab abea';
            preg_match_all('#(ab)+#',$str, $arr);
            print_r($arr[0]);
        ?>
    </div>
    <h2>На экранировку</h2>
    <div>
        <h3>Задача №8</h3>
        <?php 
            // Написать регулярку, которая найдет строку:
            //  a.a
            //  
            // не захватив остальные 
            $str = 'a.a aba aea';
            preg_match_all('#a\.a#',$str, $arr);
            print_r($arr[0]);
        ?>
    </div>
    <div>
        <h3>Задача №9</h3>
        <?php 
            // Написать регулярку, которая найдет строку:
            //  2+3
            //  
            // не захватив остальные 
            $str = '2+3 223 2223';
            preg_match_all('#2\+3#',$str, $arr);
            print_r($arr[0]);
        ?>
    </div>
    <div>
        <h3>Задача №10</h3>
        <?php 
            // Написать регулярку, которая найдет строку:
            //  2+3
            //  2++3
            //  2+++3
            // не захватив остальные 
            $str = '23 2+3 2++3 2+++3 345 567';
            preg_match_all('#2(\+)+3#',$str, $arr);
            print_r($arr[0]);
        ?>
    </div>
    <div>
        <h3>Задача №11</h3>
        <?php 
            // Написать регулярку, которая найдет строку:
            //  23
            //  2+3
            //  2++3
            //  2+++3
            // не захватив остальные 
            $str = '23 2+3 2++3 2+++3 455 677';
            preg_match_all('#2(\+)*3#',$str, $arr);
            print_r($arr[0]);
        ?>
    </div>
    <div>
        <h3>Задача №12</h3>
        <?php 
            // Написать регулярку, которая найдет строку:
            //  *q+
            //  *qq+
            //  *qqq+
            // не захватив остальные 
            $str = '*+ *q+ *qq+ *qqq+ *qqq qqq+';
            preg_match_all('#\*q+\+#',$str, $arr);
            print_r($arr[0]);
        ?>
    </div>
    <div>
        <h3>Задача №13</h3>
        <?php 
            // Написать регулярку, которая найдет строку:
            //  *+
            //  *q+
            //  *qq+
            //  *qqq+
            // не захватив остальные 
            $str = '*+ *q+ *qq+ *qqq+ *qqq qqq+';
            preg_match_all('#\*q*\+#',$str, $arr);
            print_r($arr[0]);
        ?>
    </div>
    <h2>На жадность</h2>
    <div>
        <h3>Задача №14</h3>
        <?php 
            $str = 'aba accca azzza wwwwa';
            echo preg_replace('#a.+?a#', '!', $str);
        ?>
    </div>
</body>
</html>